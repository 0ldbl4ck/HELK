# HELK process-ids catchall conversion filter conf
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron), Roberto Rodriguez (@Cyb3rWard0g)
# License: GPL-3.0

filter {
  if [event_id] {

    if [process_id] =~ /^0x/ {
      ruby {
          code => 'event.set("process_id", event.get("process_id").gsub(/^0x/, "").to_s.hex)'
          tag_on_exception =>  "_rubyexception-process_id-hex2dec"
          add_field => { "etl_pipeline" => "process_id-hex2dec" }
      }
    }
    if [parent_process_id] =~ /^0x/ {
      ruby {
          code => 'event.set("parent_process_id", event.get("parent_process_id").gsub(/^0x/, "").to_s.hex)'
          tag_on_exception =>  "_rubyexception-parent_process_id-hex2dec"
          add_field => { "etl_pipeline" => "parent_process_id-hex2dec" }
      }
    }
    if [target_process_id] =~ /^0x/ {
      ruby {
          code => 'event.set("target_process_id", event.get("target_process_id").gsub(/^0x/, "").to_s.hex)'
          tag_on_exception =>  "_rubyexception-target_process_id-hex2dec"
          add_field => { "etl_pipeline" => "target_process_id-hex2dec" }
      }
    }
    if [process_granted_access] =~ /^0x/ {
      ruby {
          code => 'event.set("process_granted_access", event.get("process_granted_access").gsub(/^0x/, "").to_s.hex)'
          tag_on_exception =>  "_rubyexception-process_granted_access-hex2dec"
          add_field => { "etl_pipeline" => "process_granted_access-hex2dec" }
      }
    }

    # Rest of previous process fields if they weren't renamed, then we still want to convert to decimal
    if [ProcessId] =~ /^0x/ {
      ruby {
        code => 'event.set("ProcessId", event.get("ProcessId").gsub(/^0x/, "").to_s.hex)'
        tag_on_exception =>  "_rubyexception-ProcessId-hex2dec"
        add_field => { "etl_pipeline" => "ProcessId-hex2dec" }
      }
    }
    if [NewProcessId] =~ /^0x/ {
      ruby {
        code => 'event.set("NewProcessId", event.get("NewProcessId").gsub(/^0x/, "").to_s.hex)'
        tag_on_exception =>  "_rubyexception-NewProcessId-hex2dec"
        add_field => { "etl_pipeline" => "NewProcessId-hex2dec" }
      }
    }
    if [SourceProcessId] =~ /^0x/ {
      ruby {
        code => 'event.set("SourceProcessId", event.get("SourceProcessId").gsub(/^0x/, "").to_s.hex)'
        tag_on_exception =>  "_rubyexception-SourceProcessId-hex2dec"
        add_field => { "etl_pipeline" => "SourceProcessId-hex2dec" }
      }
    }
    if [ParentProcessId] =~ /^0x/ {
      ruby {
        code => 'event.set("ParentProcessId", event.get("ParentProcessId").gsub(/^0x/, "").to_s.hex)'
        tag_on_exception =>  "_rubyexception-ParentProcessId-hex2dec"
        add_field => { "etl_pipeline" => "ParentProcessId-hex2dec" }
      }
    }
    if [TargetProcessId] =~ /^0x/{
      ruby {
        code => 'event.set("TargetProcessId", event.get("TargetProcessId").gsub(/^0x/, "").to_s.hex)'
        tag_on_exception =>  "_rubyexception-TargetProcessId-hex2dec"
        add_field => { "etl_pipeline" => "TargetProcessId-hex2dec" }
      }
    }

  }
}
